/* tslint:disable */
/* eslint-disable */
/**
 * Halo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.21.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { AxiosInstance, AxiosPromise, RawAxiosRequestConfig } from 'axios'
import globalAxios from 'axios'
import type { Configuration } from '../configuration'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  createRequestFunction,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setSearchParams,
  toPathString,
} from '../common'
// @ts-ignore
import { BASE_PATH, BaseAPI, RequiredError, operationServerMap, type RequestArgs } from '../base'
// @ts-ignore
import type { IndexStats } from '../models'
/**
 * MeilisearchConsoleV1alpha1Api - axios parameter creator
 * @export
 */
export const MeilisearchConsoleV1alpha1ApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     * Get Meilisearch index statistics
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMeilisearchStats: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/apis/console.api.meilisearch.halo.run/v1alpha1/stats`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication basicAuth required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration)

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * MeilisearchConsoleV1alpha1Api - functional programming interface
 * @export
 */
export const MeilisearchConsoleV1alpha1ApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = MeilisearchConsoleV1alpha1ApiAxiosParamCreator(configuration)
  return {
    /**
     * Get Meilisearch index statistics
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getMeilisearchStats(
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IndexStats>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getMeilisearchStats(options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['MeilisearchConsoleV1alpha1Api.getMeilisearchStats']?.[
          localVarOperationServerIndex
        ]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
  }
}

/**
 * MeilisearchConsoleV1alpha1Api - factory interface
 * @export
 */
export const MeilisearchConsoleV1alpha1ApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = MeilisearchConsoleV1alpha1ApiFp(configuration)
  return {
    /**
     * Get Meilisearch index statistics
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMeilisearchStats(options?: RawAxiosRequestConfig): AxiosPromise<IndexStats> {
      return localVarFp.getMeilisearchStats(options).then((request) => request(axios, basePath))
    },
  }
}

/**
 * MeilisearchConsoleV1alpha1Api - object-oriented interface
 * @export
 * @class MeilisearchConsoleV1alpha1Api
 * @extends {BaseAPI}
 */
export class MeilisearchConsoleV1alpha1Api extends BaseAPI {
  /**
   * Get Meilisearch index statistics
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MeilisearchConsoleV1alpha1Api
   */
  public getMeilisearchStats(options?: RawAxiosRequestConfig) {
    return MeilisearchConsoleV1alpha1ApiFp(this.configuration)
      .getMeilisearchStats(options)
      .then((request) => request(this.axios, this.basePath))
  }
}
